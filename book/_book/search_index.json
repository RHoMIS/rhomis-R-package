[["index.html", "RHoMIS Book 1 About", " RHoMIS Book Léo Gorman 2022-09-09 1 About The Rural Household Multi-Indicator Survey (RHoMIS) is designed to collect data on smallholder farmers. The survey is rich in information, covering a range of topics from dietary diversity to livelihoods. With so much information available, it can often be difficult to extract, This is a book documenting how to use the RHoMIS R-package. We cover 3 main topics: How to process data collected RHoMIS The logic of the calculations, and an overview of key indicators/outputs How to use the R-package to extract useful information "],["data-processing.html", "2 Data Processing 2.1 Installation 2.2 Initial Setup 2.3 Stage 1: Unit Extraction 2.4 Stage 2: Calculating Prices, Preparing Calorie Conversions, and Extracting Secondary Units 2.5 Stage 3: Calculating Indicators", " 2 Data Processing RHoMIS data processing takes place in three stages. Unit Extraction: We search through a survey for all of the units, crops, and livestock which were encountered. The user can examine these units and provide conversion factors so that everything is standardised. For crops and livestock, the user can check all of the entries and standardise (e.g. ensure that there are no duplicates with mispelling, such as “maize” and “maze”). Secondary Cleaning: Now that crop and livestock names are standardised (in step 1), we identify all of the calorie conversions and prices we need for a specific survey (e.g. based on crops identified in step one we need calorie and prices for “maize”). We use the units converted in step 1 to calculate crop prices. Indicator Calculation: Finally, with all conversions and units identified, we calculate all of the indicators possible for the survey. This is the method we have developed to process 2.1 Installation Currently RHoMIS is not available on CRAN, but we hope one day it will be. In the meantime, to install the RHoMIS R-package, you will need to install devtools, you can that by entering the following into the R console: install.packages(&quot;devtools&quot;) Then to install the most recent version of the R-package you can enter the following command library(devtools) devtools::install_github(&quot;https://github.com/l-gorman/rhomis-R-package&quot;, force = TRUE) 2.2 Initial Setup You should then ensure you have a folder containing the data you would like to process. If using Rstudio interactively, set your working directory to this folder using the setwd() command. Your directory structure should look something like this: 📂 project ┃ ┗📂 raw-data ┃ ┗📜 sample_project.csv In this case, your working directory should be the project folder. If you do not have your own RHoMIS dataset, you can access one here (you can save the file using ctrl + s or cmd + s) 2.3 Stage 1: Unit Extraction 2.3.1 Extracting Units To extract new units from the data you are working with, run the code below. Set the dataFilePath to the path of your RHoMIS raw-data file. library(rhomis) extract_units_and_conversions_csv( file_path=&quot;raw-data/sample_project.csv&quot;, id_type = &quot;string&quot;, proj_id = &quot;test_prj&quot;, form_id = &quot;test_frm&quot;)) If you now go back to your project directory, you should be able to see that more files have been added: 📂 project ┃ ┣📂 raw-data ┃ ┗📜 sample_project.csv ┃ ┣📂 conversions_stage_1 ┃ ┣📜 country.csv ┃ ┗📜 ... ┃ ┗📂 .original_stage_1_conversions ┣📜 crop_yield_units.csv ┣📜 country.csv ┗📜 ... The conversions_stage_1 folder should will include the units which you will verify and change. The .original_stage_1_conversions folder includes an original copy of the units pulled straight from the data. This folder will likely be hidden unless you change the settings on your file browser. 2.3.2 Converting Units Please note, while you do not have to convert units for the next step in the calculations to run, uncoverted units will be ignored and will lead to unnecessary missing values In the project/conversions_stage_1 directory, you will find a series of csv files with conversion factors that need to be filled in. Each file will look like the table below. The survey_value column indicates a value which was found in the survey. The conversion column shows the conversion factor which ought to be used. Where the conversion factor is unknown, the column will display NA. Where the conversion factor is known it will be provided. Known conversion factors are already embedded in the R-package. unit_type id_rhomis_dataset survey_value conversion crop_unit x foo NA crop_unit x bar NA There are a range of conversions to enter and it is important to be aware which units are needed. Each file is described in more detail below: File Description Example Survey Value Example Conversion honey_amount_to_l.csv The conversion factor should be used to convert to kilograms/litres. buckets_12_litre 12 country_to_iso2.csv The conversion factor should be used to convert country names to two-letter ISO country codes. This is important as it is used to find currency conversion factors uganda UG crop_name_to_std.csv The name of crops entered in the survey. Often enumerators may specify “other” crops in a free-text-entry field. Sometimes these crops can be mispelled, or in a language other than English. Here we correct misspellings and translations into standard forms (all lower case) maze maize crop_price_to_lcu_per_kg.csv The price units for crops which were sold. Please note that only one unit will be converted into a string, “total_income_per_year” will be converted to “total_income_per_year” as this is treated as a special case in the analysis scripts. price_per_50kg_sack 0.02 crop_amount_to_kg.csv The unit of crops which have been collected. This needs to be converted to kilograms cart_250kg 250 eggs_price_to_lcu_per_year.csv The amount of money made per unit time for selling eggs. This needs to be converted into an income per year income for 3 months 4 eggs_amount_to_pieces_per_year.csv The number of eggs collected per year pieces/day 365 fertiliser_amount_to_kg.csv The amount of fertiliser in kg sacks_25kg 25 livestock_name_to_std.csv The names of livestock entered in the survey. As with crop names, enumerators can also enter extra livestock names which are in a different language or mispelt. This conversion is used to standardise livestock names entered in the survey catel cattle milk_price_to_lcu_per_l.csv The amount of money made per unit volume or per unit time. For unit time, the options are “day”, “week”, “month”, “year”. These time units must be entered as strings. For the unit volume, numeric conversions must be entered month month 0.3litre 0.3 milk_amount_to_l.csv The amount of milk collected in litres per year. There are a number of exceptions which must be kept as text strings, and are dealt with in the analysis scripts (e.g. “per animal per day” and “l/animal/day” l/day 365 land_area_to_ha.csv The amount of land in hectares acres 0.4 2.4 Stage 2: Calculating Prices, Preparing Calorie Conversions, and Extracting Secondary Units As with unit extraction, ensure you are in the project directory. Then enter the commands below: library(rhomis) calculate_prices_csv( file_path=&quot;raw-data/sample_project.csv&quot;, id_type = &quot;string&quot;, proj_id = &quot;my_project_id&quot;, form_id = &quot;my_form_id&quot; ) You will now see that the directory structure again looks quite different: 📂 project ┃ ┣📂 raw-data ┃ ┃ ┗📜 sample_project.csv ┣📂 conversions_stage_1 ┃ ┣📜 country.csv ┃ ┗📜 ... ┃ ┗📂 .original_stage_1_conversions ┃ ┣📜 crop_yield_units.csv ┃ ┣📜 country.csv ┃ ┗📜 ... ┃ ┣📂 conversions_stage_2 ┃ ┣📜 crop_calories.csv ┃ ┣📜 mean_crop_pice_lcu_per_kg ┃ ┣📜 eggs_calories.csv ┃ ┣📜 mean_eggs_price_per_kg ┃ ┗📜 ... ┃ ┗📂 .original_stage_2_conversions ┣📜 crop_calories.csv ┣📜 mean_crop_pice_lcu_per_kg ┣📜 eggs_calories.csv ┣📜 mean_eggs_price_per_kg ┗📜 ... 2.4.1 Converting Calories, Prices, and Other Units 2.4.1.1 Calories and Prices As with the units which were extracted, you will also need to verify prices and calorie values (in the conversions_stage_2 folder). Prices will be in lcu/kg for crops, meat, and eggs (where lcu is local currency units). Prices will be in lcu/l for milk and honey. And prices will be in lcu/animal for whole livestock sales. For calorie values, conversions will be in kcal/kg or kcal/l. 2.4.1.2 Secondary Units Aside from prices and calories, there are other conversion tables to be verified, these units depend on conversions from stage 1. For example livestock_count_tlu requires us to know the standard livestock names (identified in stage 1). The secondary units currently processed in the R-package are: File Description Example Survey Value Example Conversion livestock_weight_kg.csv The conversion factor used to estimate the amount of meat collected from a whole animal. sheep 25 livestock_count_tlu.csv “Tropical Livestock Units” (TLU) for individual animals. cattle 0.7 Please note any folder with a dot before it will not be visible by default in most file explorers 2.5 Stage 3: Calculating Indicators Using the calories and prices you have converted, you will then be able to produce the final indicators. Either run the code below, or run the 03-calculate-final-indicators.R file. library(rhomis) calculate_indicators_local( file_path, id_type=&quot;string&quot;, proj_id, form_id, repeat_columns = pkg.env$repeat_columns, gender_categories = pkg.env$gender_categories) You will now see the directory includes some extra folders: You will now see that the directory structure again looks quite different. Extra folders and files have been created. There is a lot of information here, for more explanation, please see an explanation of indicators and outputs 📂 project ┃ ┣📂 raw-data ┃ ┗📜 sample_project.csv ┃ ┣📂 conversions_stage_1 ┃ ┣📜 country.csv ┃ ┗📜 ... ┃ ┗📂 .original_stage_1_conversions ┃ ┣📜 crop_yield_units.csv ┃ ┣📜 country.csv ┃ ┗📜 ... ┃ ┣📂 conversions_stage_2 ┃ ┣📜 crop_calories.csv ┃ ┣📜 mean_crop_pice_lcu_per_kg ┃ ┣📜 eggs_calories.csv ┃ ┣📜 mean_eggs_price_per_kg ┃ ┗📜 ... ┃ ┣📂 .original_stage_2_conversions ┃ ┣📜 crop_calories.csv ┃ ┣📜 mean_crop_pice_lcu_per_kg ┃ ┣📜 eggs_calories.csv ┃ ┣📜 mean_eggs_price_per_kg ┃ ┗📜 ... ┃ ┣📂 crop_data ┃ ┣📜 crop_consumed_kg_per_year.csv ┃ ┣📜 crop_harvest_kg_per_year.csv ┃ ┗📜 ... ┃ ┣📂 indicator_data ┃ ┗📜 indicators.csv ┃ ┣📂 livestock_data ┃ ┣📜 crop_consumed_kg_per_year.csv ┃ ┣📜 crop_consumed_kg_per_year.csv ┃ ┗📜 ... ┃ ┣📂 off_farm_data ┃ ┣📜 offfarm_income_name.csv ┃ ┣📜 offfarm_who_control_revenue.csv ┃ ┗📜 ... ┃ ┗📂 processed_data ┃ ┗📜 processed_data.csv ┃ ┣📂 consumption_calorie_values ┃ ┣📜 crop_calories_consumed_kcal.csv ┃ ┣📜 milk_calories_consumed_kcal.csv ┃ ┗📜 ... ┃ ┣📂 consumption_lcu_values ┃ ┣📜 value_crop_consumed_lcu.csv ┃ ┣📜 value_eggs_consumed_lcu.csv ┃ ┗📜 ... ┃ ┗📂 gender_control ┃ ┣📂 gender_control_amounts_consumed ┃ ┣📂 gender_control_income ┃ ┗📂 ... "],["indicators-explained.html", "3 Indicators Explained 3.1 Outputs 3.2 Where to start", " 3 Indicators Explained The core RHoMIS survey contains over 750 variables. These are used to calculate key indicators, such as total_income_lcu_per_year. This guide is designed to explain: How some of the main indicators are calculated How variables are linked How you can explore these calculations and indicators yourself In order to make the most of this guide, you should have a sample RHoMIS dataset, to see how to process a “Raw” RHoMIS dataset, and produce indicators from this dataset, please see data processing 3.1 Outputs 3.1.1 Indicators Indicators calculated whilst the data was being processed. These cover a range of topics, including incomes, dietary diversity, and household demographics. The indicators calculated depend on the columns present in the original raw-data.csv file. 3.1.2 Crop Data Found in the crop_data directory, in each of the csvs, a column represents the crops listed in the survey, each row represents one household (in the same row order as the original dataset) 3.1.3 Livestock Data Found in the livestock_data directory, in each of the csvs, a column represents the types of livestock listed in the survey, again each row represents a household. 3.1.4 Off-farm Data Found in the off_farm_data directory, in each of the csvs, a column represents an off-farm activity, and each row represents a household. 3.1.5 Consumption Calories Found in the consumption_calorie_values directory, in each of the csvs, a column represents the products listed in the survey, and each row represents a household. 3.1.6 Consumption value Found in the consumption_lcu_values directory, in each of the csvs, a column represents products listed in the survey, and each row represents a household. 3.1.7 Gender Control Found in the gender_control directory, in each of the csvs, a column represents products listed in the survey, and each row represents a household. 3.2 Where to start Firstly, plot_dependency_network( indicator_name=&quot;crop_sold_kg_per_year&quot;, list_of_indicators = indicator_list ) plot_dependency_network( indicator_name=&quot;male_youth_control&quot;, list_of_indicators =indicator_list ) "],["using-rhomis-r-package-to-explore-data.html", "4 Using RHoMIS R-package to explore Data", " 4 Using RHoMIS R-package to explore Data "],["indicators-explained-1.html", "5 Indicators Explained 5.1 Where to start", " 5 Indicators Explained The core RHoMIS survey contains over 750 variables. These are used to calculate key indicators, such as total_income_lcu_per_year. This guide is designed to explain: How some of the main indicators are calculated How variables are linked How you can explore these calculations and indicators yourself In order to make the most of this guide, you should have a sample RHoMIS dataset, to see how to process a “Raw” RHoMIS dataset, and produce indicators from this dataset, please see data processing 5.1 Where to start Firstly, we have created a list of indicators. To see the names of all of the indicators, enter the following command: names(indicator_list) There are a lot of indicators here. Some of them you will find as standalone columns in the RHoMIS Indicators Table. Others you will find in a looped format, in the processed data. To find out more about an indicator, you can do as follows: indicator_list[[&quot;hh_size_mae&quot;]] ## $indicator_name ## [1] &quot;hh_size_mae&quot; ## ## $output_format ## [1] &quot;column&quot; ## ## $individual_columns_required ## [1] &quot;children_under_4&quot; &quot;children_4to10&quot; &quot;males11to24&quot; &quot;females11to24&quot; &quot;males25to50&quot; ## [6] &quot;female_25_to_50&quot; &quot;male_50_plus&quot; &quot;female_50_plus&quot; ## ## $loop_columns_required ## [1] &quot;person_age&quot; &quot;person_gender&quot; &quot;hh_pop_rep_num&quot; ## ## $conversion_tables_required ## [1] &quot;MAE_coeff&quot; ## ## $api_data_required ## list() ## ## $indicators_required ## list() ## ## $function_calculated ## [1] &quot;calculate_household_size_members&quot; ## ## $search_term ## [1] &quot;indicator_search_hh_size_mae&quot; There is a lot of information here. So let’s break it down. This is telling me that the indicator is in a column format (in the indicator sheet). It requires a series of individual columns, a series of looped columns and a conversion table. No other indicators are needed to calculate “hh_size_mae”. I can see it is calculated with the calculate_household_size_members. If I want to see where this function is stored in the R-package raw code I can enter the ?calculate_household_size_members command into the console. I can search for the tag indicator_search_hh_size_mae to see exactly where the indicator is calculated in this file. Now lets look at a more complex indicator. crop_income_lcu_per_year: indicator_list[[&quot;crop_income_per_year&quot;]] ## $indicator_name ## [1] &quot;crop_income_per_year&quot; ## ## $output_format ## [1] &quot;loop&quot; ## ## $individual_columns_required ## list() ## ## $loop_columns_required ## [1] &quot;crop_sold_income&quot; &quot;crop_sold_price_quantityunits&quot; ## ## $conversion_tables_required ## [1] &quot;crop_price_unit_conversions&quot; ## ## $api_data_required ## list() ## ## $indicators_required ## [1] &quot;crop_sold_kg_per_year&quot; ## ## $function_calculated ## [1] &quot;crop_income_calculations&quot; ## ## $search_term ## [1] &quot;indicator_search_crop_income_per_year&quot; I can see that this comes in a loop format. It relies two looped columns, a conversion table, and another indicator. Again I can find the function that calculates the indicator, and use a search term to identify exactly the point where it is calcuated. However, when one indicator depends on another, we might need do know the nested relationship (i.e, what columns does the dependency rely on). If we want to visualise it, we could do this: plot_dependency_network( indicator_name=&quot;crop_income_per_year&quot; ) A lternatively,r if we want to extract the actual information, we can do this: find_nested_dependencies_list( indicator_name=&quot;crop_sold_kg_per_year&quot;, indicator_list=indicator_list, dependency_required=&quot;loop&quot;) ## [1] &quot;crop_use&quot; &quot;crop_sold_prop&quot; &quot;crop_name&quot; &quot;crop_yield&quot; ## [5] &quot;crop_yield_units&quot; &quot;crop_yield_units_other&quot; This would find all of the looped dependencies (recursively) for the indicator I am interested in. "],["reporting-issues.html", "6 Reporting Issues 6.1 Reporting Issues", " 6 Reporting Issues 6.1 Reporting Issues Please report any problems or requests you encounter in the issues section of this repo. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
